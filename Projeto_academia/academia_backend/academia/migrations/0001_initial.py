# Generated by Django 5.2.6 on 2025-09-18 00:16

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Exercicio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome')),
                ('categoria', models.CharField(choices=[('peito', 'Peito'), ('costas', 'Costas'), ('pernas', 'Pernas'), ('bracos', 'Braços'), ('ombros', 'Ombros'), ('abdomen', 'Abdômen'), ('cardio', 'Cardio')], max_length=20, verbose_name='Categoria')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('instrucoes', models.TextField(verbose_name='Instruções')),
                ('equipamento', models.CharField(blank=True, max_length=100, verbose_name='Equipamento')),
                ('nivel', models.CharField(choices=[('iniciante', 'Iniciante'), ('intermediario', 'Intermediário'), ('avancado', 'Avançado')], max_length=20, verbose_name='Nível')),
                ('imagem', models.ImageField(blank=True, null=True, upload_to='exercicios/', verbose_name='Imagem')),
                ('video_url', models.URLField(blank=True, verbose_name='URL do Vídeo')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
            ],
            options={
                'verbose_name': 'Exercício',
                'verbose_name_plural': 'Exercícios',
                'ordering': ['categoria', 'nome'],
            },
        ),
        migrations.CreateModel(
            name='Plano',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('preco', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Preço')),
                ('duracao_dias', models.IntegerField(default=30, verbose_name='Duração em Dias')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('beneficios', models.JSONField(default=list, verbose_name='Benefícios')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Plano',
                'verbose_name_plural': 'Planos',
                'ordering': ['preco'],
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefone')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Data de Nascimento')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Feminino'), ('O', 'Outro')], max_length=1, null=True, verbose_name='Gênero')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('is_active_member', models.BooleanField(default=False, verbose_name='Membro Ativo')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Avaliacao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_avaliacao', models.DateField(verbose_name='Data da Avaliação')),
                ('peso', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Peso (kg)')),
                ('altura', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Altura (cm)')),
                ('percentual_gordura', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='% Gordura')),
                ('massa_muscular', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Massa Muscular (kg)')),
                ('imc', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='IMC')),
                ('observacoes', models.TextField(blank=True, verbose_name='Observações')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avaliacoes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Avaliação',
                'verbose_name_plural': 'Avaliações',
                'ordering': ['-data_avaliacao'],
            },
        ),
        migrations.CreateModel(
            name='Frequencia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_entrada', models.DateTimeField(verbose_name='Data/Hora de Entrada')),
                ('data_saida', models.DateTimeField(blank=True, null=True, verbose_name='Data/Hora de Saída')),
                ('observacoes', models.TextField(blank=True, verbose_name='Observações')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='frequencias', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Frequência',
                'verbose_name_plural': 'Frequências',
                'ordering': ['-data_entrada'],
            },
        ),
        migrations.CreateModel(
            name='Matricula',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_inicio', models.DateField(verbose_name='Data de Início')),
                ('data_fim', models.DateField(verbose_name='Data de Fim')),
                ('status', models.CharField(choices=[('ativa', 'Ativa'), ('suspensa', 'Suspensa'), ('cancelada', 'Cancelada'), ('vencida', 'Vencida')], default='ativa', max_length=20, verbose_name='Status')),
                ('valor_pago', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Valor Pago')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matriculas', to=settings.AUTH_USER_MODEL)),
                ('plano', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matriculas', to='academia.plano')),
            ],
            options={
                'verbose_name': 'Matrícula',
                'verbose_name_plural': 'Matrículas',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Treino',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome')),
                ('descricao', models.TextField(blank=True, verbose_name='Descrição')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treinos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Treino',
                'verbose_name_plural': 'Treinos',
                'ordering': ['-data_criacao'],
            },
        ),
        migrations.CreateModel(
            name='TreinoExercicio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('series', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Séries')),
                ('repeticoes', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Repetições')),
                ('peso', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Peso (kg)')),
                ('tempo_descanso', models.IntegerField(blank=True, null=True, verbose_name='Tempo de Descanso (segundos)')),
                ('observacoes', models.TextField(blank=True, verbose_name='Observações')),
                ('ordem', models.IntegerField(default=1, verbose_name='Ordem')),
                ('exercicio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academia.exercicio')),
                ('treino', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academia.treino')),
            ],
            options={
                'verbose_name': 'Exercício do Treino',
                'verbose_name_plural': 'Exercícios do Treino',
                'ordering': ['ordem'],
            },
        ),
        migrations.AddField(
            model_name='treino',
            name='exercicios',
            field=models.ManyToManyField(through='academia.TreinoExercicio', to='academia.exercicio'),
        ),
    ]
